package kipster.nt.biomes.warm;

import kipster.nt.world.gen.trees.WorldGenTreeOak;
import net.minecraft.entity.passive.EntityWolf;
import net.minecraft.init.Blocks;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.World;
import net.minecraft.world.biome.Biome;
import net.minecraft.world.gen.feature.WorldGenAbstractTree;
import net.minecraft.world.gen.feature.WorldGenLakes;

import java.util.Random;

public class BiomeOakForest extends Biome {

	protected static final WorldGenLakes LAKE = new WorldGenLakes(Blocks.WATER);
	protected static final WorldGenTreeOak OAK_TREE = new WorldGenTreeOak(false, false);

	public BiomeOakForest(BiomeProperties properties) {
		super(properties);

		topBlock = Blocks.GRASS.getDefaultState();
		fillerBlock = Blocks.DIRT.getDefaultState();

		this.decorator.treesPerChunk = 10;
		this.decorator.flowersPerChunk = 1;
		this.decorator.grassPerChunk = 3;
		this.decorator.generateFalls = true;

		this.spawnableCreatureList.add(new Biome.SpawnListEntry(EntityWolf.class, 5, 4, 4));
	}

	public WorldGenAbstractTree getRandomTreeFeature(Random rand) {
		return OAK_TREE;
	}

	@Override
	public void decorate(World worldIn, Random rand, BlockPos pos) {

		// Check if ores have been generated by super.decorate()
		if (!isBiomeDecorated(worldIn, pos)) {
			generateEmeralds(worldIn, rand, pos);
		}
		super.decorate(worldIn, rand, pos);
	}

	private boolean isBiomeDecorated(World worldIn, BlockPos pos) {
		int chunkX = pos.getX() >> 4;
		int chunkZ = pos.getZ() >> 4;
		Biome biome = worldIn.getBiomeProvider().getBiome(new BlockPos((chunkX << 4) + 8, 0, (chunkZ << 4) + 8));

		return biome.decorator.treesPerChunk > 0 || biome.decorator.flowersPerChunk > 0 || biome.decorator.grassPerChunk > 0;
	}

	public void generateEmeralds(World worldIn, Random rand, BlockPos pos) {
		int count = 10 + rand.nextInt(6);
		for (int i = 0; i < count; i++) {
			int offset = net.minecraftforge.common.ForgeModContainer.fixVanillaCascading ? 8 : 0; // MC-114332
			BlockPos blockpos = pos.add(rand.nextInt(16) + offset, rand.nextInt(28) + 2, rand.nextInt(16) + offset);

			net.minecraft.block.state.IBlockState state = worldIn.getBlockState(blockpos);
			if (state.getBlock().isReplaceableOreGen(state, worldIn, blockpos, net.minecraft.block.state.pattern.BlockMatcher.forBlock(Blocks.STONE))) {
				worldIn.setBlockState(blockpos, Blocks.EMERALD_ORE.getDefaultState(), 16 | 2);
			}
		}
	}
}
